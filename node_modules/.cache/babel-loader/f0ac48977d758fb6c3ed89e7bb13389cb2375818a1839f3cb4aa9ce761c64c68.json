{"ast":null,"code":"var _jsxFileName = \"/home/rishi/flowapp1/flowchart-app/src/components/FlowChart.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useCallback } from \"react\";\n// import ReactFlow, {\n//   addEdge,\n//   useNodesState,\n//   useEdgesState,\n//   MiniMap,\n//   Controls,\n//   Background,\n// } from \"reactflow\";\n// import \"reactflow/dist/style.css\";\n\n// const initialNodes = [\n//   {\n//     id: \"1\",\n//     type: \"input\",\n//     data: { label: \"Start\" },\n//     position: { x: 250, y: 5 },\n//   },\n// ];\n\n// const initialEdges = [];\n\n// const FlowChart = () => {\n//   const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n//   const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n\n//   const [selectedNode, setSelectedNode] = useState(null);\n//   const [nodeDetails, setNodeDetails] = useState({\n//     subject: \"\",\n//     body: \"\",\n//     time: \"\",\n//     days: \"\",\n//     emails: \"\",\n//   });\n\n//   const onConnect = useCallback(\n//     (params) => setEdges((eds) => addEdge(params, eds)),\n//     [setEdges]\n//   );\n\n//   const addNode = (type) => {\n//     const id = (nodes.length + 1).toString();\n//     const newNode = {\n//       id,\n//       data: { label: type },\n//       position: { x: Math.random() * 400, y: Math.random() * 400 },\n//     };\n//     setNodes((nds) => [...nds, newNode]);\n\n//     if (nodes.length > 0) {\n//       setEdges((eds) => [\n//         ...eds,\n//         { id: `e${nodes[nodes.length - 1].id}-${id}`, source: nodes[nodes.length - 1].id, target: id },\n//       ]);\n//     }\n//   };\n\n//   const handleNodeClick = (event, node) => {\n//     if (\n//       node.data.label === \"Cold Email\" ||\n//       node.data.label === \"Wait\" ||\n//       node.data.label === \"Lead Source\"\n//     ) {\n//       setSelectedNode(node);\n//     }\n//   };\n\n//   const handleDetailChange = (e) => {\n//     const { name, value } = e.target;\n//     setNodeDetails((prev) => ({ ...prev, [name]: value }));\n//   };\n\n//   const saveNodeDetails = () => {\n//     setNodes((nds) =>\n//       nds.map((node) =>\n//         node.id === selectedNode.id\n//           ? {\n//               ...node,\n//               data: {\n//                 ...node.data,\n//                 details: { ...nodeDetails },\n//                 label:\n//                   selectedNode.data.label === \"Cold Email\" ? (\n//                     <div>\n//                       <strong>Cold Email</strong>\n//                       <br />\n//                       <small>Subject: {nodeDetails.subject}</small>\n//                     </div>\n//                   ) : selectedNode.data.label === \"Wait\" ? (\n//                     <div>\n//                       <strong>Wait</strong>\n//                       <br />\n//                       <small>Days: {nodeDetails.days}</small>\n//                     </div>\n//                   ) : (\n//                     <div>\n//                       <strong>Lead Source</strong>\n//                       <br />\n//                       <small>Email IDs: {nodeDetails.emails.split(\",\").length}</small>\n//                     </div>\n//                   ),\n//               },\n//             }\n//           : node\n//       )\n//     );\n//     setSelectedNode(null);\n//     setNodeDetails({ subject: \"\", body: \"\", time: \"\", days: \"\", emails: \"\" });\n//   };\n\n//   return (\n//     <div style={{ height: \"100vh\" }}>\n//       <ReactFlow\n//         nodes={nodes}\n//         edges={edges}\n//         onNodesChange={onNodesChange}\n//         onEdgesChange={onEdgesChange}\n//         onConnect={onConnect}\n//         onNodeClick={handleNodeClick}\n//         fitView\n//       >\n//         <MiniMap />\n//         <Controls />\n//         <Background />\n//       </ReactFlow>\n//       <div style={{ position: \"absolute\", top: 10, right: 10 }}>\n//         <button onClick={() => addNode(\"Cold Email\")}>Add Cold Email</button>\n//         <button onClick={() => addNode(\"Wait\")}>Add Wait</button>\n//         <button onClick={() => addNode(\"Lead Source\")}>Add Lead Source</button>\n//       </div>\n\n//       {selectedNode && (\n//         <div\n//           style={{\n//             position: \"absolute\",\n//             top: \"20%\",\n//             left: \"20%\",\n//             width: \"300px\",\n//             padding: \"20px\",\n//             backgroundColor: \"white\",\n//             border: \"1px solid #ccc\",\n//             borderRadius: \"8px\",\n//             zIndex: 10,\n//           }}\n//         >\n//           <h3>\n//             {selectedNode.data.label === \"Cold Email\"\n//               ? \"Cold Email Details\"\n//               : selectedNode.data.label === \"Wait\"\n//               ? \"Wait Node Details\"\n//               : \"Lead Source Details\"}\n//           </h3>\n//           {selectedNode.data.label === \"Cold Email\" && (\n//             <>\n//               <label>\n//                 Subject:\n//                 <input\n//                   type=\"text\"\n//                   name=\"subject\"\n//                   value={nodeDetails.subject}\n//                   onChange={handleDetailChange}\n//                   style={{ width: \"100%\", marginBottom: \"10px\" }}\n//                 />\n//               </label>\n//               <label>\n//                 Body:\n//                 <textarea\n//                   name=\"body\"\n//                   value={nodeDetails.body}\n//                   onChange={handleDetailChange}\n//                   style={{ width: \"100%\", marginBottom: \"10px\" }}\n//                 />\n//               </label>\n//               <label>\n//                 Time:\n//                 <input\n//                   type=\"time\"\n//                   name=\"time\"\n//                   value={nodeDetails.time}\n//                   onChange={handleDetailChange}\n//                   style={{ width: \"100%\", marginBottom: \"10px\" }}\n//                 />\n//               </label>\n//             </>\n//           )}\n//           {selectedNode.data.label === \"Wait\" && (\n//             <label>\n//               Days:\n//               <input\n//                 type=\"number\"\n//                 name=\"days\"\n//                 value={nodeDetails.days}\n//                 onChange={handleDetailChange}\n//                 style={{ width: \"100%\", marginBottom: \"10px\" }}\n//               />\n//             </label>\n//           )}\n//           {selectedNode.data.label === \"Lead Source\" && (\n//             <label>\n//               Email IDs (comma-separated):\n//               <textarea\n//                 name=\"emails\"\n//                 value={nodeDetails.emails}\n//                 onChange={handleDetailChange}\n//                 style={{ width: \"100%\", marginBottom: \"10px\" }}\n//               />\n//             </label>\n//           )}\n//           <button onClick={saveNodeDetails} style={{ marginRight: \"10px\" }}>\n//             Save\n//           </button>\n//           <button onClick={() => setSelectedNode(null)}>Cancel</button>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default FlowChart;\n\nimport React, { useState } from 'react';\nimport ReactFlow, { ReactFlowProvider, addEdge, removeElements, Controls } from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction FlowChart() {\n  _s();\n  const [nodes, setNodes] = useState([{\n    id: '1',\n    data: {\n      label: 'Start'\n    },\n    position: {\n      x: 250,\n      y: 0\n    },\n    style: {\n      background: 'lightblue',\n      padding: 10,\n      borderRadius: 5\n    }\n  }, {\n    id: '2',\n    data: {\n      label: 'Cold Email'\n    },\n    position: {\n      x: 250,\n      y: 100\n    },\n    style: {\n      background: 'lightgreen',\n      padding: 10,\n      borderRadius: 5\n    }\n  }, {\n    id: '3',\n    data: {\n      label: 'Wait'\n    },\n    position: {\n      x: 250,\n      y: 200\n    },\n    style: {\n      background: 'lightyellow',\n      padding: 10,\n      borderRadius: 5\n    }\n  }, {\n    id: '4',\n    data: {\n      label: 'Lead Source'\n    },\n    position: {\n      x: 250,\n      y: 300\n    },\n    style: {\n      background: 'lightcoral',\n      padding: 10,\n      borderRadius: 5\n    }\n  }]);\n  const [edges, setEdges] = useState([]);\n  const [subject, setSubject] = useState('');\n  const [body, setBody] = useState('');\n  const [emailList, setEmailList] = useState('');\n  const [scheduledTime, setScheduledTime] = useState('');\n  const [delay, setDelay] = useState('');\n  const [showForm, setShowForm] = useState(false);\n  const [formNodeId, setFormNodeId] = useState(null);\n  const handleNodeClick = (event, node) => {\n    if (node.id === '2') {\n      // Cold Email node\n      setShowForm(true);\n      setFormNodeId(node.id);\n    }\n    // Handle other nodes as needed\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const emailData = {\n      subject,\n      body,\n      emailList: emailList.split(',').map(email => email.trim()),\n      scheduledTime,\n      delay: Number(delay)\n    };\n    try {\n      const response = await fetch('http://localhost:5000/api/send-emails', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(emailData)\n      });\n      const result = await response.json();\n      if (response.ok) {\n        alert('Emails scheduled successfully!');\n        setShowForm(false); // Close the form after successful submission\n      } else {\n        alert('Error scheduling emails');\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      alert('Error sending request');\n    }\n  };\n  const handleAddNode = () => {\n    const newNode = {\n      id: `${nodes.length + 1}`,\n      data: {\n        label: 'New Node'\n      },\n      position: {\n        x: 250,\n        y: 100 + nodes.length * 100\n      },\n      style: {\n        background: 'lightblue',\n        padding: 10,\n        borderRadius: 5\n      }\n    };\n    setNodes(prevNodes => [...prevNodes, newNode]);\n  };\n  const onConnect = params => setEdges(eds => addEdge(params, eds));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex'\n    },\n    children: [/*#__PURE__*/_jsxDEV(ReactFlowProvider, {\n      children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n        nodes: nodes,\n        edges: edges,\n        onNodesChange: setNodes,\n        onEdgesChange: setEdges,\n        onConnect: onConnect,\n        onNodeClick: handleNodeClick,\n        style: {\n          height: 500,\n          width: '100%'\n        },\n        children: /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 7\n    }, this), showForm && formNodeId === '2' && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-container\",\n      style: {\n        marginLeft: '20px'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Subject\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 301,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: subject,\n            onChange: e => setSubject(e.target.value),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 302,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Body\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 305,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            value: body,\n            onChange: e => setBody(e.target.value),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 306,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Email List (comma separated)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 309,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: emailList,\n            onChange: e => setEmailList(e.target.value),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 310,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Scheduled Time\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 313,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"datetime-local\",\n            value: scheduledTime,\n            onChange: e => setScheduledTime(e.target.value),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Delay (days)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            value: delay,\n            onChange: e => setDelay(e.target.value),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 318,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Schedule Emails\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAddNode,\n      children: \"Add Node\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 290,\n    columnNumber: 5\n  }, this);\n}\n_s(FlowChart, \"ke+/Xt3lFk1HZSjnRIpU3M1w2gc=\");\n_c = FlowChart;\nexport default FlowChart;\nvar _c;\n$RefreshReg$(_c, \"FlowChart\");","map":{"version":3,"names":["React","useState","ReactFlow","ReactFlowProvider","addEdge","removeElements","Controls","jsxDEV","_jsxDEV","FlowChart","_s","nodes","setNodes","id","data","label","position","x","y","style","background","padding","borderRadius","edges","setEdges","subject","setSubject","body","setBody","emailList","setEmailList","scheduledTime","setScheduledTime","delay","setDelay","showForm","setShowForm","formNodeId","setFormNodeId","handleNodeClick","event","node","handleSubmit","e","preventDefault","emailData","split","map","email","trim","Number","response","fetch","method","headers","JSON","stringify","result","json","ok","alert","error","console","handleAddNode","newNode","length","prevNodes","onConnect","params","eds","display","children","onNodesChange","onEdgesChange","onNodeClick","height","width","fileName","_jsxFileName","lineNumber","columnNumber","className","marginLeft","onSubmit","type","value","onChange","target","required","onClick","_c","$RefreshReg$"],"sources":["/home/rishi/flowapp1/flowchart-app/src/components/FlowChart.jsx"],"sourcesContent":["// import React, { useState, useCallback } from \"react\";\n// import ReactFlow, {\n//   addEdge,\n//   useNodesState,\n//   useEdgesState,\n//   MiniMap,\n//   Controls,\n//   Background,\n// } from \"reactflow\";\n// import \"reactflow/dist/style.css\";\n\n// const initialNodes = [\n//   {\n//     id: \"1\",\n//     type: \"input\",\n//     data: { label: \"Start\" },\n//     position: { x: 250, y: 5 },\n//   },\n// ];\n\n// const initialEdges = [];\n\n// const FlowChart = () => {\n//   const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n//   const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n\n//   const [selectedNode, setSelectedNode] = useState(null);\n//   const [nodeDetails, setNodeDetails] = useState({\n//     subject: \"\",\n//     body: \"\",\n//     time: \"\",\n//     days: \"\",\n//     emails: \"\",\n//   });\n\n//   const onConnect = useCallback(\n//     (params) => setEdges((eds) => addEdge(params, eds)),\n//     [setEdges]\n//   );\n\n//   const addNode = (type) => {\n//     const id = (nodes.length + 1).toString();\n//     const newNode = {\n//       id,\n//       data: { label: type },\n//       position: { x: Math.random() * 400, y: Math.random() * 400 },\n//     };\n//     setNodes((nds) => [...nds, newNode]);\n\n//     if (nodes.length > 0) {\n//       setEdges((eds) => [\n//         ...eds,\n//         { id: `e${nodes[nodes.length - 1].id}-${id}`, source: nodes[nodes.length - 1].id, target: id },\n//       ]);\n//     }\n//   };\n\n//   const handleNodeClick = (event, node) => {\n//     if (\n//       node.data.label === \"Cold Email\" ||\n//       node.data.label === \"Wait\" ||\n//       node.data.label === \"Lead Source\"\n//     ) {\n//       setSelectedNode(node);\n//     }\n//   };\n\n//   const handleDetailChange = (e) => {\n//     const { name, value } = e.target;\n//     setNodeDetails((prev) => ({ ...prev, [name]: value }));\n//   };\n\n//   const saveNodeDetails = () => {\n//     setNodes((nds) =>\n//       nds.map((node) =>\n//         node.id === selectedNode.id\n//           ? {\n//               ...node,\n//               data: {\n//                 ...node.data,\n//                 details: { ...nodeDetails },\n//                 label:\n//                   selectedNode.data.label === \"Cold Email\" ? (\n//                     <div>\n//                       <strong>Cold Email</strong>\n//                       <br />\n//                       <small>Subject: {nodeDetails.subject}</small>\n//                     </div>\n//                   ) : selectedNode.data.label === \"Wait\" ? (\n//                     <div>\n//                       <strong>Wait</strong>\n//                       <br />\n//                       <small>Days: {nodeDetails.days}</small>\n//                     </div>\n//                   ) : (\n//                     <div>\n//                       <strong>Lead Source</strong>\n//                       <br />\n//                       <small>Email IDs: {nodeDetails.emails.split(\",\").length}</small>\n//                     </div>\n//                   ),\n//               },\n//             }\n//           : node\n//       )\n//     );\n//     setSelectedNode(null);\n//     setNodeDetails({ subject: \"\", body: \"\", time: \"\", days: \"\", emails: \"\" });\n//   };\n\n//   return (\n//     <div style={{ height: \"100vh\" }}>\n//       <ReactFlow\n//         nodes={nodes}\n//         edges={edges}\n//         onNodesChange={onNodesChange}\n//         onEdgesChange={onEdgesChange}\n//         onConnect={onConnect}\n//         onNodeClick={handleNodeClick}\n//         fitView\n//       >\n//         <MiniMap />\n//         <Controls />\n//         <Background />\n//       </ReactFlow>\n//       <div style={{ position: \"absolute\", top: 10, right: 10 }}>\n//         <button onClick={() => addNode(\"Cold Email\")}>Add Cold Email</button>\n//         <button onClick={() => addNode(\"Wait\")}>Add Wait</button>\n//         <button onClick={() => addNode(\"Lead Source\")}>Add Lead Source</button>\n//       </div>\n\n//       {selectedNode && (\n//         <div\n//           style={{\n//             position: \"absolute\",\n//             top: \"20%\",\n//             left: \"20%\",\n//             width: \"300px\",\n//             padding: \"20px\",\n//             backgroundColor: \"white\",\n//             border: \"1px solid #ccc\",\n//             borderRadius: \"8px\",\n//             zIndex: 10,\n//           }}\n//         >\n//           <h3>\n//             {selectedNode.data.label === \"Cold Email\"\n//               ? \"Cold Email Details\"\n//               : selectedNode.data.label === \"Wait\"\n//               ? \"Wait Node Details\"\n//               : \"Lead Source Details\"}\n//           </h3>\n//           {selectedNode.data.label === \"Cold Email\" && (\n//             <>\n//               <label>\n//                 Subject:\n//                 <input\n//                   type=\"text\"\n//                   name=\"subject\"\n//                   value={nodeDetails.subject}\n//                   onChange={handleDetailChange}\n//                   style={{ width: \"100%\", marginBottom: \"10px\" }}\n//                 />\n//               </label>\n//               <label>\n//                 Body:\n//                 <textarea\n//                   name=\"body\"\n//                   value={nodeDetails.body}\n//                   onChange={handleDetailChange}\n//                   style={{ width: \"100%\", marginBottom: \"10px\" }}\n//                 />\n//               </label>\n//               <label>\n//                 Time:\n//                 <input\n//                   type=\"time\"\n//                   name=\"time\"\n//                   value={nodeDetails.time}\n//                   onChange={handleDetailChange}\n//                   style={{ width: \"100%\", marginBottom: \"10px\" }}\n//                 />\n//               </label>\n//             </>\n//           )}\n//           {selectedNode.data.label === \"Wait\" && (\n//             <label>\n//               Days:\n//               <input\n//                 type=\"number\"\n//                 name=\"days\"\n//                 value={nodeDetails.days}\n//                 onChange={handleDetailChange}\n//                 style={{ width: \"100%\", marginBottom: \"10px\" }}\n//               />\n//             </label>\n//           )}\n//           {selectedNode.data.label === \"Lead Source\" && (\n//             <label>\n//               Email IDs (comma-separated):\n//               <textarea\n//                 name=\"emails\"\n//                 value={nodeDetails.emails}\n//                 onChange={handleDetailChange}\n//                 style={{ width: \"100%\", marginBottom: \"10px\" }}\n//               />\n//             </label>\n//           )}\n//           <button onClick={saveNodeDetails} style={{ marginRight: \"10px\" }}>\n//             Save\n//           </button>\n//           <button onClick={() => setSelectedNode(null)}>Cancel</button>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default FlowChart;\n\nimport React, { useState } from 'react';\nimport ReactFlow, { ReactFlowProvider, addEdge, removeElements, Controls } from 'reactflow';\nimport 'reactflow/dist/style.css';\n\nfunction FlowChart() {\n  const [nodes, setNodes] = useState([\n    { id: '1', data: { label: 'Start' }, position: { x: 250, y: 0 }, style: { background: 'lightblue', padding: 10, borderRadius: 5 }},\n    { id: '2', data: { label: 'Cold Email' }, position: { x: 250, y: 100 }, style: { background: 'lightgreen', padding: 10, borderRadius: 5 }},\n    { id: '3', data: { label: 'Wait' }, position: { x: 250, y: 200 }, style: { background: 'lightyellow', padding: 10, borderRadius: 5 }},\n    { id: '4', data: { label: 'Lead Source' }, position: { x: 250, y: 300 }, style: { background: 'lightcoral', padding: 10, borderRadius: 5 }},\n  ]);\n  const [edges, setEdges] = useState([]);\n  const [subject, setSubject] = useState('');\n  const [body, setBody] = useState('');\n  const [emailList, setEmailList] = useState('');\n  const [scheduledTime, setScheduledTime] = useState('');\n  const [delay, setDelay] = useState('');\n  const [showForm, setShowForm] = useState(false);\n  const [formNodeId, setFormNodeId] = useState(null);\n\n  const handleNodeClick = (event, node) => {\n    if (node.id === '2') { // Cold Email node\n      setShowForm(true);\n      setFormNodeId(node.id);\n    }\n    // Handle other nodes as needed\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    const emailData = {\n      subject,\n      body,\n      emailList: emailList.split(',').map(email => email.trim()),\n      scheduledTime,\n      delay: Number(delay),\n    };\n\n    try {\n      const response = await fetch('http://localhost:5000/api/send-emails', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(emailData),\n      });\n\n      const result = await response.json();\n      if (response.ok) {\n        alert('Emails scheduled successfully!');\n        setShowForm(false); // Close the form after successful submission\n      } else {\n        alert('Error scheduling emails');\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      alert('Error sending request');\n    }\n  };\n\n  const handleAddNode = () => {\n    const newNode = { id: `${nodes.length + 1}`, data: { label: 'New Node' }, position: { x: 250, y: 100 + nodes.length * 100 }, style: { background: 'lightblue', padding: 10, borderRadius: 5 }};\n    setNodes((prevNodes) => [...prevNodes, newNode]);\n  };\n\n  const onConnect = (params) => setEdges((eds) => addEdge(params, eds));\n\n  return (\n    <div style={{ display: 'flex' }}>\n      <ReactFlowProvider>\n        <ReactFlow nodes={nodes} edges={edges} onNodesChange={setNodes} onEdgesChange={setEdges} onConnect={onConnect} onNodeClick={handleNodeClick} style={{ height: 500, width: '100%' }}>\n          <Controls />\n        </ReactFlow>\n      </ReactFlowProvider>\n\n      {showForm && formNodeId === '2' && (\n        <div className=\"form-container\" style={{ marginLeft: '20px' }}>\n          <form onSubmit={handleSubmit}>\n            <div>\n              <label>Subject</label>\n              <input type=\"text\" value={subject} onChange={(e) => setSubject(e.target.value)} required />\n            </div>\n            <div>\n              <label>Body</label>\n              <textarea value={body} onChange={(e) => setBody(e.target.value)} required />\n            </div>\n            <div>\n              <label>Email List (comma separated)</label>\n              <input type=\"text\" value={emailList} onChange={(e) => setEmailList(e.target.value)} required />\n            </div>\n            <div>\n              <label>Scheduled Time</label>\n              <input type=\"datetime-local\" value={scheduledTime} onChange={(e) => setScheduledTime(e.target.value)} required />\n            </div>\n            <div>\n              <label>Delay (days)</label>\n              <input type=\"number\" value={delay} onChange={(e) => setDelay(e.target.value)} required />\n            </div>\n            <button type=\"submit\">Schedule Emails</button>\n          </form>\n        </div>\n      )}\n\n      <button onClick={handleAddNode}>Add Node</button>\n    </div>\n  );\n}\n\nexport default FlowChart;\n\n\n\n\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,SAAS,IAAIC,iBAAiB,EAAEC,OAAO,EAAEC,cAAc,EAAEC,QAAQ,QAAQ,WAAW;AAC3F,OAAO,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}