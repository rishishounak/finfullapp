{"ast":null,"code":"var _jsxFileName = \"/home/rishi/flowapp1/flowchart-app/src/components/FlowChart.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useCallback } from \"react\";\n// import ReactFlow, {\n//   addEdge,\n//   useNodesState,\n//   useEdgesState,\n//   MiniMap,\n//   Controls,\n//   Background,\n// } from \"reactflow\";\n// import \"reactflow/dist/style.css\";\n\n// const initialNodes = [\n//   {\n//     id: \"1\",\n//     type: \"input\",\n//     data: { label: \"Start\" },\n//     position: { x: 250, y: 5 },\n//   },\n// ];\n\n// const initialEdges = [];\n\n// const FlowChart = () => {\n//   const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n//   const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n\n//   const [selectedNode, setSelectedNode] = useState(null);\n//   const [nodeDetails, setNodeDetails] = useState({\n//     subject: \"\",\n//     body: \"\",\n//     time: \"\",\n//     days: \"\",\n//     emails: \"\",\n//   });\n\n//   const onConnect = useCallback(\n//     (params) => setEdges((eds) => addEdge(params, eds)),\n//     [setEdges]\n//   );\n\n//   const addNode = (type) => {\n//     const id = (nodes.length + 1).toString();\n//     const newNode = {\n//       id,\n//       data: { label: type },\n//       position: { x: Math.random() * 400, y: Math.random() * 400 },\n//     };\n//     setNodes((nds) => [...nds, newNode]);\n\n//     if (nodes.length > 0) {\n//       setEdges((eds) => [\n//         ...eds,\n//         { id: `e${nodes[nodes.length - 1].id}-${id}`, source: nodes[nodes.length - 1].id, target: id },\n//       ]);\n//     }\n//   };\n\n//   const handleNodeClick = (event, node) => {\n//     if (\n//       node.data.label === \"Cold Email\" ||\n//       node.data.label === \"Wait\" ||\n//       node.data.label === \"Lead Source\"\n//     ) {\n//       setSelectedNode(node);\n//     }\n//   };\n\n//   const handleDetailChange = (e) => {\n//     const { name, value } = e.target;\n//     setNodeDetails((prev) => ({ ...prev, [name]: value }));\n//   };\n\n//   const saveNodeDetails = () => {\n//     setNodes((nds) =>\n//       nds.map((node) =>\n//         node.id === selectedNode.id\n//           ? {\n//               ...node,\n//               data: {\n//                 ...node.data,\n//                 details: { ...nodeDetails },\n//                 label:\n//                   selectedNode.data.label === \"Cold Email\" ? (\n//                     <div>\n//                       <strong>Cold Email</strong>\n//                       <br />\n//                       <small>Subject: {nodeDetails.subject}</small>\n//                     </div>\n//                   ) : selectedNode.data.label === \"Wait\" ? (\n//                     <div>\n//                       <strong>Wait</strong>\n//                       <br />\n//                       <small>Days: {nodeDetails.days}</small>\n//                     </div>\n//                   ) : (\n//                     <div>\n//                       <strong>Lead Source</strong>\n//                       <br />\n//                       <small>Email IDs: {nodeDetails.emails.split(\",\").length}</small>\n//                     </div>\n//                   ),\n//               },\n//             }\n//           : node\n//       )\n//     );\n//     setSelectedNode(null);\n//     setNodeDetails({ subject: \"\", body: \"\", time: \"\", days: \"\", emails: \"\" });\n//   };\n\n//   return (\n//     <div style={{ height: \"100vh\" }}>\n//       <ReactFlow\n//         nodes={nodes}\n//         edges={edges}\n//         onNodesChange={onNodesChange}\n//         onEdgesChange={onEdgesChange}\n//         onConnect={onConnect}\n//         onNodeClick={handleNodeClick}\n//         fitView\n//       >\n//         <MiniMap />\n//         <Controls />\n//         <Background />\n//       </ReactFlow>\n//       <div style={{ position: \"absolute\", top: 10, right: 10 }}>\n//         <button onClick={() => addNode(\"Cold Email\")}>Add Cold Email</button>\n//         <button onClick={() => addNode(\"Wait\")}>Add Wait</button>\n//         <button onClick={() => addNode(\"Lead Source\")}>Add Lead Source</button>\n//       </div>\n\n//       {selectedNode && (\n//         <div\n//           style={{\n//             position: \"absolute\",\n//             top: \"20%\",\n//             left: \"20%\",\n//             width: \"300px\",\n//             padding: \"20px\",\n//             backgroundColor: \"white\",\n//             border: \"1px solid #ccc\",\n//             borderRadius: \"8px\",\n//             zIndex: 10,\n//           }}\n//         >\n//           <h3>\n//             {selectedNode.data.label === \"Cold Email\"\n//               ? \"Cold Email Details\"\n//               : selectedNode.data.label === \"Wait\"\n//               ? \"Wait Node Details\"\n//               : \"Lead Source Details\"}\n//           </h3>\n//           {selectedNode.data.label === \"Cold Email\" && (\n//             <>\n//               <label>\n//                 Subject:\n//                 <input\n//                   type=\"text\"\n//                   name=\"subject\"\n//                   value={nodeDetails.subject}\n//                   onChange={handleDetailChange}\n//                   style={{ width: \"100%\", marginBottom: \"10px\" }}\n//                 />\n//               </label>\n//               <label>\n//                 Body:\n//                 <textarea\n//                   name=\"body\"\n//                   value={nodeDetails.body}\n//                   onChange={handleDetailChange}\n//                   style={{ width: \"100%\", marginBottom: \"10px\" }}\n//                 />\n//               </label>\n//               <label>\n//                 Time:\n//                 <input\n//                   type=\"time\"\n//                   name=\"time\"\n//                   value={nodeDetails.time}\n//                   onChange={handleDetailChange}\n//                   style={{ width: \"100%\", marginBottom: \"10px\" }}\n//                 />\n//               </label>\n//             </>\n//           )}\n//           {selectedNode.data.label === \"Wait\" && (\n//             <label>\n//               Days:\n//               <input\n//                 type=\"number\"\n//                 name=\"days\"\n//                 value={nodeDetails.days}\n//                 onChange={handleDetailChange}\n//                 style={{ width: \"100%\", marginBottom: \"10px\" }}\n//               />\n//             </label>\n//           )}\n//           {selectedNode.data.label === \"Lead Source\" && (\n//             <label>\n//               Email IDs (comma-separated):\n//               <textarea\n//                 name=\"emails\"\n//                 value={nodeDetails.emails}\n//                 onChange={handleDetailChange}\n//                 style={{ width: \"100%\", marginBottom: \"10px\" }}\n//               />\n//             </label>\n//           )}\n//           <button onClick={saveNodeDetails} style={{ marginRight: \"10px\" }}>\n//             Save\n//           </button>\n//           <button onClick={() => setSelectedNode(null)}>Cancel</button>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default FlowChart;\n\n// // import React, { useState } from 'react';\n// // import ReactFlow, { ReactFlowProvider, addEdge, removeElements, Controls } from 'reactflow';\n// // import 'reactflow/dist/style.css';\n\n// // function FlowChart() {\n// //   const [nodes, setNodes] = useState([\n// //     { id: '1', data: { label: 'Start' }, position: { x: 250, y: 0 }, style: { background: 'lightblue', padding: 10, borderRadius: 5 }},\n// //     { id: '2', data: { label: 'Cold Email' }, position: { x: 250, y: 100 }, style: { background: 'lightgreen', padding: 10, borderRadius: 5 }},\n// //     { id: '3', data: { label: 'Wait' }, position: { x: 250, y: 200 }, style: { background: 'lightyellow', padding: 10, borderRadius: 5 }},\n// //     { id: '4', data: { label: 'Lead Source' }, position: { x: 250, y: 300 }, style: { background: 'lightcoral', padding: 10, borderRadius: 5 }},\n// //   ]);\n// //   const [edges, setEdges] = useState([]);\n// //   const [subject, setSubject] = useState('');\n// //   const [body, setBody] = useState('');\n// //   const [emailList, setEmailList] = useState('');\n// //   const [scheduledTime, setScheduledTime] = useState('');\n// //   const [delay, setDelay] = useState('');\n// //   const [showForm, setShowForm] = useState(false);\n// //   const [formNodeId, setFormNodeId] = useState(null);\n\n// //   const handleNodeClick = (event, node) => {\n// //     if (node.id === '2') { // Cold Email node\n// //       setShowForm(true);\n// //       setFormNodeId(node.id);\n// //     }\n// //     // Handle other nodes as needed\n// //   };\n\n// //   const handleSubmit = async (e) => {\n// //     e.preventDefault();\n\n// //     const emailData = {\n// //       subject,\n// //       body,\n// //       emailList: emailList.split(',').map(email => email.trim()),\n// //       scheduledTime,\n// //       delay: Number(delay),\n// //     };\n\n// //     try {\n// //       const response = await fetch('http://localhost:5000/api/send-emails', {\n// //         method: 'POST',\n// //         headers: {\n// //           'Content-Type': 'application/json',\n// //         },\n// //         body: JSON.stringify(emailData),\n// //       });\n\n// //       const result = await response.json();\n// //       if (response.ok) {\n// //         alert('Emails scheduled successfully!');\n// //         setShowForm(false); // Close the form after successful submission\n// //       } else {\n// //         alert('Error scheduling emails');\n// //       }\n// //     } catch (error) {\n// //       console.error('Error:', error);\n// //       alert('Error sending request');\n// //     }\n// //   };\n\n// //   const handleAddNode = () => {\n// //     const newNode = { id: `${nodes.length + 1}`, data: { label: 'New Node' }, position: { x: 250, y: 100 + nodes.length * 100 }, style: { background: 'lightblue', padding: 10, borderRadius: 5 }};\n// //     setNodes((prevNodes) => [...prevNodes, newNode]);\n// //   };\n\n// //   const onConnect = (params) => setEdges((eds) => addEdge(params, eds));\n\n// //   return (\n// //     <div style={{ display: 'flex' }}>\n// //       <ReactFlowProvider>\n// //         <ReactFlow nodes={nodes} edges={edges} onNodesChange={setNodes} onEdgesChange={setEdges} onConnect={onConnect} onNodeClick={handleNodeClick} style={{ height: 500, width: '100%' }}>\n// //           <Controls />\n// //         </ReactFlow>\n// //       </ReactFlowProvider>\n\n// //       {showForm && formNodeId === '2' && (\n// //         <div className=\"form-container\" style={{ marginLeft: '20px' }}>\n// //           <form onSubmit={handleSubmit}>\n// //             <div>\n// //               <label>Subject</label>\n// //               <input type=\"text\" value={subject} onChange={(e) => setSubject(e.target.value)} required />\n// //             </div>\n// //             <div>\n// //               <label>Body</label>\n// //               <textarea value={body} onChange={(e) => setBody(e.target.value)} required />\n// //             </div>\n// //             <div>\n// //               <label>Email List (comma separated)</label>\n// //               <input type=\"text\" value={emailList} onChange={(e) => setEmailList(e.target.value)} required />\n// //             </div>\n// //             <div>\n// //               <label>Scheduled Time</label>\n// //               <input type=\"datetime-local\" value={scheduledTime} onChange={(e) => setScheduledTime(e.target.value)} required />\n// //             </div>\n// //             <div>\n// //               <label>Delay (days)</label>\n// //               <input type=\"number\" value={delay} onChange={(e) => setDelay(e.target.value)} required />\n// //             </div>\n// //             <button type=\"submit\">Schedule Emails</button>\n// //           </form>\n// //         </div>\n// //       )}\n\n// //       <button onClick={handleAddNode}>Add Node</button>\n// //     </div>\n// //   );\n// // }\n\n// // export default FlowChart;\n\nimport React, { useState, useCallback } from 'react';\nimport ReactFlow, { addEdge, MiniMap, Controls, Background } from 'react-flow-renderer';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialNodes = [{\n  id: 'start',\n  data: {\n    label: 'Start'\n  },\n  position: {\n    x: 250,\n    y: 0\n  }\n}, {\n  id: 'cold-email',\n  data: {\n    label: 'Cold Email'\n  },\n  position: {\n    x: 250,\n    y: 100\n  }\n}, {\n  id: 'wait',\n  data: {\n    label: 'Wait'\n  },\n  position: {\n    x: 250,\n    y: 200\n  }\n}, {\n  id: 'lead-source',\n  data: {\n    label: 'Lead Source'\n  },\n  position: {\n    x: 250,\n    y: 300\n  }\n}];\nconst initialEdges = [{\n  id: 'e1',\n  source: 'start',\n  target: 'cold-email'\n}, {\n  id: 'e2',\n  source: 'cold-email',\n  target: 'wait'\n}, {\n  id: 'e3',\n  source: 'wait',\n  target: 'lead-source'\n}];\nconst FlowChart = () => {\n  _s();\n  const [nodes, setNodes] = useState(initialNodes);\n  const [edges, setEdges] = useState(initialEdges);\n  const [emailData, setEmailData] = useState({\n    subject: '',\n    body: '',\n    emailList: [],\n    scheduledTime: '',\n    delay: ''\n  });\n  const handleNodeClick = (event, node) => {\n    if (node.id === 'cold-email') {\n      // Prompt the user to input email details (subject, body)\n      const subject = prompt('Enter subject of the email:');\n      const body = prompt('Enter body of the email:');\n      setEmailData(prevData => ({\n        ...prevData,\n        subject,\n        body\n      }));\n    } else if (node.id === 'wait') {\n      // Prompt for delay in days\n      const delay = prompt('Enter number of days to wait before next email:');\n      setEmailData(prevData => ({\n        ...prevData,\n        delay\n      }));\n    } else if (node.id === 'lead-source') {\n      // Prompt for email list\n      const emailList = prompt('Enter a list of emails separated by commas:').split(',');\n      setEmailData(prevData => ({\n        ...prevData,\n        emailList\n      }));\n    }\n  };\n  const handleSendEmails = async () => {\n    const {\n      subject,\n      body,\n      emailList,\n      scheduledTime,\n      delay\n    } = emailData;\n    if (!subject || !body || emailList.length === 0) {\n      alert('Please complete all fields!');\n      return;\n    }\n    try {\n      const response = await axios.post('http://localhost:5000/api/send-emails', {\n        subject,\n        body,\n        emailList,\n        scheduledTime,\n        delay\n      });\n      alert(response.data.message);\n    } catch (error) {\n      console.error('Error sending emails:', error);\n      alert('Error sending emails');\n    }\n  };\n  const onConnect = useCallback(params => setEdges(eds => addEdge(params, eds)), []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '100vh'\n    },\n    children: [/*#__PURE__*/_jsxDEV(ReactFlow, {\n      elements: [...nodes, ...edges],\n      onNodeClick: handleNodeClick,\n      onConnect: onConnect,\n      nodesDraggable: false,\n      nodesConnectable: false,\n      nodesResizable: false,\n      children: [/*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 429,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 430,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 431,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 421,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSendEmails,\n      style: {\n        position: 'absolute',\n        bottom: 20,\n        right: 20\n      },\n      children: \"Send Emails\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 433,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 420,\n    columnNumber: 5\n  }, this);\n};\n_s(FlowChart, \"n0UIHZ28S25sxDaLutm647/PMp8=\");\n_c = FlowChart;\nexport default FlowChart;\nvar _c;\n$RefreshReg$(_c, \"FlowChart\");","map":{"version":3,"names":["React","useState","useCallback","ReactFlow","addEdge","MiniMap","Controls","Background","axios","jsxDEV","_jsxDEV","initialNodes","id","data","label","position","x","y","initialEdges","source","target","FlowChart","_s","nodes","setNodes","edges","setEdges","emailData","setEmailData","subject","body","emailList","scheduledTime","delay","handleNodeClick","event","node","prompt","prevData","split","handleSendEmails","length","alert","response","post","message","error","console","onConnect","params","eds","style","height","children","elements","onNodeClick","nodesDraggable","nodesConnectable","nodesResizable","fileName","_jsxFileName","lineNumber","columnNumber","onClick","bottom","right","_c","$RefreshReg$"],"sources":["/home/rishi/flowapp1/flowchart-app/src/components/FlowChart.jsx"],"sourcesContent":["// import React, { useState, useCallback } from \"react\";\n// import ReactFlow, {\n//   addEdge,\n//   useNodesState,\n//   useEdgesState,\n//   MiniMap,\n//   Controls,\n//   Background,\n// } from \"reactflow\";\n// import \"reactflow/dist/style.css\";\n\n// const initialNodes = [\n//   {\n//     id: \"1\",\n//     type: \"input\",\n//     data: { label: \"Start\" },\n//     position: { x: 250, y: 5 },\n//   },\n// ];\n\n// const initialEdges = [];\n\n// const FlowChart = () => {\n//   const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n//   const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n\n//   const [selectedNode, setSelectedNode] = useState(null);\n//   const [nodeDetails, setNodeDetails] = useState({\n//     subject: \"\",\n//     body: \"\",\n//     time: \"\",\n//     days: \"\",\n//     emails: \"\",\n//   });\n\n//   const onConnect = useCallback(\n//     (params) => setEdges((eds) => addEdge(params, eds)),\n//     [setEdges]\n//   );\n\n//   const addNode = (type) => {\n//     const id = (nodes.length + 1).toString();\n//     const newNode = {\n//       id,\n//       data: { label: type },\n//       position: { x: Math.random() * 400, y: Math.random() * 400 },\n//     };\n//     setNodes((nds) => [...nds, newNode]);\n\n//     if (nodes.length > 0) {\n//       setEdges((eds) => [\n//         ...eds,\n//         { id: `e${nodes[nodes.length - 1].id}-${id}`, source: nodes[nodes.length - 1].id, target: id },\n//       ]);\n//     }\n//   };\n\n//   const handleNodeClick = (event, node) => {\n//     if (\n//       node.data.label === \"Cold Email\" ||\n//       node.data.label === \"Wait\" ||\n//       node.data.label === \"Lead Source\"\n//     ) {\n//       setSelectedNode(node);\n//     }\n//   };\n\n//   const handleDetailChange = (e) => {\n//     const { name, value } = e.target;\n//     setNodeDetails((prev) => ({ ...prev, [name]: value }));\n//   };\n\n//   const saveNodeDetails = () => {\n//     setNodes((nds) =>\n//       nds.map((node) =>\n//         node.id === selectedNode.id\n//           ? {\n//               ...node,\n//               data: {\n//                 ...node.data,\n//                 details: { ...nodeDetails },\n//                 label:\n//                   selectedNode.data.label === \"Cold Email\" ? (\n//                     <div>\n//                       <strong>Cold Email</strong>\n//                       <br />\n//                       <small>Subject: {nodeDetails.subject}</small>\n//                     </div>\n//                   ) : selectedNode.data.label === \"Wait\" ? (\n//                     <div>\n//                       <strong>Wait</strong>\n//                       <br />\n//                       <small>Days: {nodeDetails.days}</small>\n//                     </div>\n//                   ) : (\n//                     <div>\n//                       <strong>Lead Source</strong>\n//                       <br />\n//                       <small>Email IDs: {nodeDetails.emails.split(\",\").length}</small>\n//                     </div>\n//                   ),\n//               },\n//             }\n//           : node\n//       )\n//     );\n//     setSelectedNode(null);\n//     setNodeDetails({ subject: \"\", body: \"\", time: \"\", days: \"\", emails: \"\" });\n//   };\n\n//   return (\n//     <div style={{ height: \"100vh\" }}>\n//       <ReactFlow\n//         nodes={nodes}\n//         edges={edges}\n//         onNodesChange={onNodesChange}\n//         onEdgesChange={onEdgesChange}\n//         onConnect={onConnect}\n//         onNodeClick={handleNodeClick}\n//         fitView\n//       >\n//         <MiniMap />\n//         <Controls />\n//         <Background />\n//       </ReactFlow>\n//       <div style={{ position: \"absolute\", top: 10, right: 10 }}>\n//         <button onClick={() => addNode(\"Cold Email\")}>Add Cold Email</button>\n//         <button onClick={() => addNode(\"Wait\")}>Add Wait</button>\n//         <button onClick={() => addNode(\"Lead Source\")}>Add Lead Source</button>\n//       </div>\n\n//       {selectedNode && (\n//         <div\n//           style={{\n//             position: \"absolute\",\n//             top: \"20%\",\n//             left: \"20%\",\n//             width: \"300px\",\n//             padding: \"20px\",\n//             backgroundColor: \"white\",\n//             border: \"1px solid #ccc\",\n//             borderRadius: \"8px\",\n//             zIndex: 10,\n//           }}\n//         >\n//           <h3>\n//             {selectedNode.data.label === \"Cold Email\"\n//               ? \"Cold Email Details\"\n//               : selectedNode.data.label === \"Wait\"\n//               ? \"Wait Node Details\"\n//               : \"Lead Source Details\"}\n//           </h3>\n//           {selectedNode.data.label === \"Cold Email\" && (\n//             <>\n//               <label>\n//                 Subject:\n//                 <input\n//                   type=\"text\"\n//                   name=\"subject\"\n//                   value={nodeDetails.subject}\n//                   onChange={handleDetailChange}\n//                   style={{ width: \"100%\", marginBottom: \"10px\" }}\n//                 />\n//               </label>\n//               <label>\n//                 Body:\n//                 <textarea\n//                   name=\"body\"\n//                   value={nodeDetails.body}\n//                   onChange={handleDetailChange}\n//                   style={{ width: \"100%\", marginBottom: \"10px\" }}\n//                 />\n//               </label>\n//               <label>\n//                 Time:\n//                 <input\n//                   type=\"time\"\n//                   name=\"time\"\n//                   value={nodeDetails.time}\n//                   onChange={handleDetailChange}\n//                   style={{ width: \"100%\", marginBottom: \"10px\" }}\n//                 />\n//               </label>\n//             </>\n//           )}\n//           {selectedNode.data.label === \"Wait\" && (\n//             <label>\n//               Days:\n//               <input\n//                 type=\"number\"\n//                 name=\"days\"\n//                 value={nodeDetails.days}\n//                 onChange={handleDetailChange}\n//                 style={{ width: \"100%\", marginBottom: \"10px\" }}\n//               />\n//             </label>\n//           )}\n//           {selectedNode.data.label === \"Lead Source\" && (\n//             <label>\n//               Email IDs (comma-separated):\n//               <textarea\n//                 name=\"emails\"\n//                 value={nodeDetails.emails}\n//                 onChange={handleDetailChange}\n//                 style={{ width: \"100%\", marginBottom: \"10px\" }}\n//               />\n//             </label>\n//           )}\n//           <button onClick={saveNodeDetails} style={{ marginRight: \"10px\" }}>\n//             Save\n//           </button>\n//           <button onClick={() => setSelectedNode(null)}>Cancel</button>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default FlowChart;\n\n// // import React, { useState } from 'react';\n// // import ReactFlow, { ReactFlowProvider, addEdge, removeElements, Controls } from 'reactflow';\n// // import 'reactflow/dist/style.css';\n\n// // function FlowChart() {\n// //   const [nodes, setNodes] = useState([\n// //     { id: '1', data: { label: 'Start' }, position: { x: 250, y: 0 }, style: { background: 'lightblue', padding: 10, borderRadius: 5 }},\n// //     { id: '2', data: { label: 'Cold Email' }, position: { x: 250, y: 100 }, style: { background: 'lightgreen', padding: 10, borderRadius: 5 }},\n// //     { id: '3', data: { label: 'Wait' }, position: { x: 250, y: 200 }, style: { background: 'lightyellow', padding: 10, borderRadius: 5 }},\n// //     { id: '4', data: { label: 'Lead Source' }, position: { x: 250, y: 300 }, style: { background: 'lightcoral', padding: 10, borderRadius: 5 }},\n// //   ]);\n// //   const [edges, setEdges] = useState([]);\n// //   const [subject, setSubject] = useState('');\n// //   const [body, setBody] = useState('');\n// //   const [emailList, setEmailList] = useState('');\n// //   const [scheduledTime, setScheduledTime] = useState('');\n// //   const [delay, setDelay] = useState('');\n// //   const [showForm, setShowForm] = useState(false);\n// //   const [formNodeId, setFormNodeId] = useState(null);\n\n// //   const handleNodeClick = (event, node) => {\n// //     if (node.id === '2') { // Cold Email node\n// //       setShowForm(true);\n// //       setFormNodeId(node.id);\n// //     }\n// //     // Handle other nodes as needed\n// //   };\n\n// //   const handleSubmit = async (e) => {\n// //     e.preventDefault();\n\n// //     const emailData = {\n// //       subject,\n// //       body,\n// //       emailList: emailList.split(',').map(email => email.trim()),\n// //       scheduledTime,\n// //       delay: Number(delay),\n// //     };\n\n// //     try {\n// //       const response = await fetch('http://localhost:5000/api/send-emails', {\n// //         method: 'POST',\n// //         headers: {\n// //           'Content-Type': 'application/json',\n// //         },\n// //         body: JSON.stringify(emailData),\n// //       });\n\n// //       const result = await response.json();\n// //       if (response.ok) {\n// //         alert('Emails scheduled successfully!');\n// //         setShowForm(false); // Close the form after successful submission\n// //       } else {\n// //         alert('Error scheduling emails');\n// //       }\n// //     } catch (error) {\n// //       console.error('Error:', error);\n// //       alert('Error sending request');\n// //     }\n// //   };\n\n// //   const handleAddNode = () => {\n// //     const newNode = { id: `${nodes.length + 1}`, data: { label: 'New Node' }, position: { x: 250, y: 100 + nodes.length * 100 }, style: { background: 'lightblue', padding: 10, borderRadius: 5 }};\n// //     setNodes((prevNodes) => [...prevNodes, newNode]);\n// //   };\n\n// //   const onConnect = (params) => setEdges((eds) => addEdge(params, eds));\n\n// //   return (\n// //     <div style={{ display: 'flex' }}>\n// //       <ReactFlowProvider>\n// //         <ReactFlow nodes={nodes} edges={edges} onNodesChange={setNodes} onEdgesChange={setEdges} onConnect={onConnect} onNodeClick={handleNodeClick} style={{ height: 500, width: '100%' }}>\n// //           <Controls />\n// //         </ReactFlow>\n// //       </ReactFlowProvider>\n\n// //       {showForm && formNodeId === '2' && (\n// //         <div className=\"form-container\" style={{ marginLeft: '20px' }}>\n// //           <form onSubmit={handleSubmit}>\n// //             <div>\n// //               <label>Subject</label>\n// //               <input type=\"text\" value={subject} onChange={(e) => setSubject(e.target.value)} required />\n// //             </div>\n// //             <div>\n// //               <label>Body</label>\n// //               <textarea value={body} onChange={(e) => setBody(e.target.value)} required />\n// //             </div>\n// //             <div>\n// //               <label>Email List (comma separated)</label>\n// //               <input type=\"text\" value={emailList} onChange={(e) => setEmailList(e.target.value)} required />\n// //             </div>\n// //             <div>\n// //               <label>Scheduled Time</label>\n// //               <input type=\"datetime-local\" value={scheduledTime} onChange={(e) => setScheduledTime(e.target.value)} required />\n// //             </div>\n// //             <div>\n// //               <label>Delay (days)</label>\n// //               <input type=\"number\" value={delay} onChange={(e) => setDelay(e.target.value)} required />\n// //             </div>\n// //             <button type=\"submit\">Schedule Emails</button>\n// //           </form>\n// //         </div>\n// //       )}\n\n// //       <button onClick={handleAddNode}>Add Node</button>\n// //     </div>\n// //   );\n// // }\n\n// // export default FlowChart;\n\n\n\n\n\n\n\nimport React, { useState, useCallback } from 'react';\nimport ReactFlow, { addEdge, MiniMap, Controls, Background } from 'react-flow-renderer';\nimport axios from 'axios';\n\nconst initialNodes = [\n  { id: 'start', data: { label: 'Start' }, position: { x: 250, y: 0 } },\n  { id: 'cold-email', data: { label: 'Cold Email' }, position: { x: 250, y: 100 } },\n  { id: 'wait', data: { label: 'Wait' }, position: { x: 250, y: 200 } },\n  { id: 'lead-source', data: { label: 'Lead Source' }, position: { x: 250, y: 300 } },\n];\n\nconst initialEdges = [\n  { id: 'e1', source: 'start', target: 'cold-email' },\n  { id: 'e2', source: 'cold-email', target: 'wait' },\n  { id: 'e3', source: 'wait', target: 'lead-source' },\n];\n\nconst FlowChart = () => {\n  const [nodes, setNodes] = useState(initialNodes);\n  const [edges, setEdges] = useState(initialEdges);\n\n  const [emailData, setEmailData] = useState({\n    subject: '',\n    body: '',\n    emailList: [],\n    scheduledTime: '',\n    delay: '',\n  });\n\n  const handleNodeClick = (event, node) => {\n    if (node.id === 'cold-email') {\n      // Prompt the user to input email details (subject, body)\n      const subject = prompt('Enter subject of the email:');\n      const body = prompt('Enter body of the email:');\n      setEmailData((prevData) => ({\n        ...prevData,\n        subject,\n        body,\n      }));\n    } else if (node.id === 'wait') {\n      // Prompt for delay in days\n      const delay = prompt('Enter number of days to wait before next email:');\n      setEmailData((prevData) => ({\n        ...prevData,\n        delay,\n      }));\n    } else if (node.id === 'lead-source') {\n      // Prompt for email list\n      const emailList = prompt('Enter a list of emails separated by commas:').split(',');\n      setEmailData((prevData) => ({\n        ...prevData,\n        emailList,\n      }));\n    }\n  };\n\n  const handleSendEmails = async () => {\n    const { subject, body, emailList, scheduledTime, delay } = emailData;\n\n    if (!subject || !body || emailList.length === 0) {\n      alert('Please complete all fields!');\n      return;\n    }\n\n    try {\n      const response = await axios.post('http://localhost:5000/api/send-emails', {\n        subject,\n        body,\n        emailList,\n        scheduledTime,\n        delay,\n      });\n      alert(response.data.message);\n    } catch (error) {\n      console.error('Error sending emails:', error);\n      alert('Error sending emails');\n    }\n  };\n\n  const onConnect = useCallback((params) => setEdges((eds) => addEdge(params, eds)), []);\n\n  return (\n    <div style={{ height: '100vh' }}>\n      <ReactFlow\n        elements={[...nodes, ...edges]}\n        onNodeClick={handleNodeClick}\n        onConnect={onConnect}\n        nodesDraggable={false}\n        nodesConnectable={false}\n        nodesResizable={false}\n      >\n        <MiniMap />\n        <Controls />\n        <Background />\n      </ReactFlow>\n      <button onClick={handleSendEmails} style={{ position: 'absolute', bottom: 20, right: 20 }}>\n        Send Emails\n      </button>\n    </div>\n  );\n};\n\nexport default FlowChart;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}